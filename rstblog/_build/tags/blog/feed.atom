<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://blog.dbrgn.ch/feed.atom</id>
  <updated>2012-06-11T00:00:00Z</updated>
  <link href="http://blog.dbrgn.ch/" />
  <link href="http://blog.dbrgn.ch/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Der Bloggerfilm / Einfluss von Twitter auf Blogging</title>
    <id>http://blog.dbrgn.ch/2011/1/30/der-bloggerfilm-einfluss-von-twitter-auf-blogging</id>
    <updated>2011-01-30T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2011/1/30/der-bloggerfilm-einfluss-von-twitter-auf-blogging" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;div class="section" id="film"&gt;
&lt;h2&gt;Film&lt;/h2&gt;
&lt;p&gt;Heute erst entdeckt: &lt;a class="reference external" href="http://bloggerfilm.ch/bloggerfilm-jetzt-anschauen/"&gt;Der Bloggerfilm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Michael Eugster hat im Rahmen seiner Maturaarbeit eine kurze Dokumentation über
die Schweizer &amp;quot;Bloggerszene&amp;quot; (aka Blogosphere) produziert. Cool gemacht, zeigt
auch einige Bekannte Gesichter :)&lt;/p&gt;
&lt;iframe src="http://player.vimeo.com/video/17227977"     width="500" height="281" frameborder="0"     webkitAllowFullScreen mozallowfullscreen allowFullScreen     class="align-none"&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="statistiken"&gt;
&lt;h2&gt;Statistiken&lt;/h2&gt;
&lt;p&gt;Im Film wurde auch die &amp;quot;Abwanderung von Beiträgen zu Twitter / Facebook&amp;quot;
erwähnt. Bei mir merkt man das auch stark. Ich wollte es genauer wissen und hab
mir mal mit &lt;a class="reference external" href="http://vis.stanford.edu/protovis/"&gt;Protovis&lt;/a&gt; eine &lt;a class="reference external" href="http://ich-wars-nicht.ch/protovis/blog.php"&gt;Statistik&lt;/a&gt; erstellt. Die Statistik zeigt die
Anzahl Blogeinträge pro Monat. Schön zu sehen ist hier, wie die Zahlen nach
meinem &lt;a class="reference external" href="http://twitter.com/helligusvart/status/3781838673"&gt;ersten Tweet&lt;/a&gt; stark
gesunken sind.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Blogposts pro Monat" src="http://blog.ich-wars-nicht.ch/wp-content/uploads/2011/01/screenshot_20110130_01.png" /&gt;
&lt;p class="caption"&gt;Statistik: Blogposts pro Monat&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Trotzdem bleiben die Zahlen einigermassen konstant. In der prä-Twitterischen Ära
waren es zwischen 15 und 25 Posts pro Monat, jetzt in der Ritter... ääh,
Twitterzeit sind es ungefähr 5 bis 10. Diese sind in meinem Fall meistens
technischer Natur und häufig auf Englisch, um sie einem breiteren Publikum
zugänglich zu machen, jedoch sind es ab und zu auch Dinge die ich im Internet
finde und noch etwas ausführlicher kommentieren will, als es auf Twitter und
Facebook möglich ist.&lt;/p&gt;
&lt;p&gt;Für das schnelle Teilen von Links und Videos, wie es die Blogger früher viel
gemacht haben, hat mein Blog allerdings ausgedient - Twitter ist da viel
flexibler und schneller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fazit"&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Die Bloggerszene &lt;a class="reference external" href="http://twitter.com/helligusvart/status/3781838673"&gt;ist tot&lt;/a&gt;, es lebe &lt;a class="reference external" href="http://vimeo.com/17987843"&gt;die
Bloggerszene&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Goodbye Wordpress, hi rstblog!</title>
    <id>http://blog.dbrgn.ch/2012/6/11/rstblog</id>
    <updated>2012-06-11T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2012/6/11/rstblog" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;Since having switched from the PHP world to the Python world about 2 years ago, I thought about
relaunching my Blog using Python instead of PHP. At first, I thought about creating an application
with Django and PostgreSQL, but never really had the time and motivation to finally implement it.
But today I stumbled over &lt;a class="reference external" href="https://github.com/mitsuhiko/rstblog"&gt;rstblog&lt;/a&gt; by &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="meet-rstblog"&gt;
&lt;h2&gt;Meet rstblog&lt;/h2&gt;
&lt;p&gt;It is basically a static &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; to HTML converter. You create a
&lt;cite&gt;year/month/day&lt;/cite&gt; folder structure, create &lt;cite&gt;.rst&lt;/cite&gt; files in there, add metadata
to them in &lt;a class="reference external" href="http://www.yaml.org/"&gt;YAML&lt;/a&gt; format and run the generator-script.&lt;/p&gt;
&lt;p&gt;Because it's static, you don't need any dynamic webserver or interpreter, it's just plain HTML files
that you can serve practically everywhere. You can even track them using a source control system.
And last but not least – you'll never have to update your Wordpress installation again, yay!&lt;/p&gt;
&lt;p&gt;rstblog supports everything a blog needs: detail pages, archive pages, tags,
atom feeds and comments (using &lt;a class="reference external" href="http://disqus.com/"&gt;Disqus&lt;/a&gt;). You can create
custom stylesheets and templates.&lt;/p&gt;
&lt;p&gt;You can also embed syntax highlighted code using &lt;a class="reference external" href="http://pygments.org/"&gt;pygments&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;I don&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;t like spam!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;a class="reference external" href="http://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; formulas:&lt;/p&gt;
&lt;blockquote class="math"&gt;&lt;img src="/static/_math/d53927719c238cece74d6de3f2bc80ff512faf78.png" alt="f(x) = a_0 + \sum_{n=1}^{\infty}\left(a_n \cos \frac{n \pi x}{L} + b_n \sin \frac{n \pi x}{L}\right)"&gt;&lt;/blockquote&gt;&lt;p&gt;There's even more to like. If you want to know more, take a look at the
&lt;a class="reference external" href="https://github.com/mitsuhiko/rstblog"&gt;repository and the sourcecode&lt;/a&gt;. That's
also one of the downsides – there's no official documentation and the project
seems pretty inactive, pull requests aren't being merged.&lt;/p&gt;
&lt;p&gt;To get started, here are some related blogposts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://codesymphony.net/2011/09/10/setting-up-rstblog/"&gt;http://codesymphony.net/2011/09/10/setting-up-rstblog/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nblock.org/2011/08/31/1st-blogpost/"&gt;http://nblock.org/2011/08/31/1st-blogpost/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mattdeboard.net/2011/05/09/more-tips-on-rstblog/"&gt;http://mattdeboard.net/2011/05/09/more-tips-on-rstblog/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="publishing-content"&gt;
&lt;h2&gt;Publishing Content&lt;/h2&gt;
&lt;p&gt;To easily publish content, I use &lt;a class="reference external" href="http://fabfile.org/"&gt;Fabric&lt;/a&gt; and &lt;a class="reference external" href="http://rsync.samba.org/"&gt;rsync&lt;/a&gt;. Some easy fab tasks simplify the workflow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.project&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rsync_project&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ich-wars-nicht.ch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/var/www/dbrgn/blog/&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git push&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;run-rstblog serve&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# Build HTML&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;rm -rf _build/ &amp;amp;&amp;amp; run-rstblog build&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Generate sitemaps&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python gensitemap.py &amp;gt; _build/sitemap.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Minify CSS&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cssmin &amp;lt; _build/static/style.css &amp;gt; _build/static/style.min.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mv _build/static/style.min.css _build/static/style.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cssmin &amp;lt; _build/static/_pygments.css &amp;gt; _build/static/_pygments.min.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mv _build/static/_pygments.min.css _build/static/_pygments.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Add timestamp to css files&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;find _build -type f -exec sed -i &amp;quot;s/\(link.*\)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
          &lt;span class="s"&gt;&amp;#39;style.css/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;1style.css?&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/g&amp;quot; {} \;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;find _build -type f -exec sed -i &amp;quot;s/\(link.*\)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
          &lt;span class="s"&gt;&amp;#39;_pygments.css/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;1_pygments.css?&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/g&amp;quot; {} \;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;rsync_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;local_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_build/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;*.pyc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;requirements.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see the entire fabfile &lt;a class="reference external" href="https://github.com/dbrgn/blog/blob/master/fabfile.py"&gt;on Github&lt;/a&gt;. The sitemaps are
generated by &lt;a class="reference external" href="https://github.com/dbrgn/blog/blob/master/gensitemap.py"&gt;gensitemap.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By issueing a simple &lt;tt class="docutils literal"&gt;fab publish&lt;/tt&gt; in the root directory, the following steps
are taken:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;cite&gt;_build&lt;/cite&gt; directory is (re)built&lt;/li&gt;
&lt;li&gt;Sitemaps are generated for each &lt;cite&gt;.html&lt;/cite&gt; file&lt;/li&gt;
&lt;li&gt;CSS files are minified in-place&lt;/li&gt;
&lt;li&gt;A timestamp is appended to all CSS file names to make browsers reload cached
content&lt;/li&gt;
&lt;li&gt;The &lt;cite&gt;_build&lt;/cite&gt; directory is deployed to the server&lt;/li&gt;
&lt;li&gt;The git repository is pushed to Github&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="this-blog"&gt;
&lt;h2&gt;This Blog&lt;/h2&gt;
&lt;p&gt;Besides the blog-related technical details, this blog will from now on focus
mostly on technical content, usually written in English, mostly about Python /
Django / Linux / Programming related things.&lt;/p&gt;
&lt;p&gt;The blog repository is &lt;a class="reference external" href="https://github.com/dbrgn/blog"&gt;published on Github&lt;/a&gt;. Content is under a CC by-sa 3.0 license.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

