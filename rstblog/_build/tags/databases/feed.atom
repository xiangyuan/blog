<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://blog.dbrgn.ch/feed.atom</id>
  <updated>2012-07-08T00:00:00Z</updated>
  <link href="http://blog.dbrgn.ch/" />
  <link href="http://blog.dbrgn.ch/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Change MySQL Database Encoding</title>
    <id>http://blog.dbrgn.ch/2010/6/18/change-mysql-database-encoding</id>
    <updated>2010-06-18T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2010/6/18/change-mysql-database-encoding" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;To change MySQL table column encoding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;artists&lt;/span&gt;
&lt;span class="k"&gt;CHANGE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fieldname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fieldname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fieldtype&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;CHARACTER&lt;/span&gt; &lt;span class="kt"&gt;SET&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;collation&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To change table encoding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;CONVERT&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="k"&gt;CHARACTER&lt;/span&gt; &lt;span class="kt"&gt;SET&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;collation&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To change database encoding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dbname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;CHARACTER&lt;/span&gt; &lt;span class="kt"&gt;SET&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;collation&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Marking South migrations as new</title>
    <id>http://blog.dbrgn.ch/2012/7/8/marking-south-migrations-as-new</id>
    <updated>2012-07-08T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2012/7/8/marking-south-migrations-as-new" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;Sometimes you might get to the point where you accidentally faked all &lt;a class="reference external" href="http://south.aeracode.org/"&gt;South&lt;/a&gt; migrations for a specific app using the
&lt;tt class="docutils literal"&gt;‑‑fake&lt;/tt&gt; option, but the database is missing the last change.&lt;/p&gt;
&lt;p&gt;In my case, I faked three migrations, but the database state was still at 0002.
If you list the migrations, however, all migrations are marked as run.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./manage.py migrate cmsplugin_mailchimp --list

 cmsplugin_mailchimp
  (*) 0001_initial
  (*) 0002_thankyou_field
  (*) 0003_redirect_url
&lt;/pre&gt;
&lt;p&gt;So what you want to do here is to mark the 0003 migration as new. There's no
extra option to do this, but there is a different, quite obvious solution:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./manage.py migrate cmsplugin_mailchimp 0002 --fake

 - Soft matched migration 0002 to 0002_thankyou_field.
Running migrations for cmsplugin_mailchimp:
 - Migrating backwards to just after 0002_thankyou_field.
 &amp;lt; cmsplugin_mailchimp:0003_redirect_url
   (faked)

$ ./manage.py migrate cmsplugin_mailchimp --list

 cmsplugin_mailchimp
  (*) 0001_initial
  (*) 0002_thankyou_field
  ( ) 0003_redirect_url
&lt;/pre&gt;
&lt;p&gt;Now the state of South matches the state of the database, and I can actually
run the last migration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./manage.py migrate cmsplugin_mailchimp

Running migrations for cmsplugin_mailchimp:
 - Migrating forwards to 0003_redirect_url.
 &amp;gt; cmsplugin_mailchimp:0003_redirect_url
 - Loading initial data for cmsplugin_mailchimp.
Installed 0 object(s) from 0 fixture(s)
&lt;/pre&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Show MySQL Database Encoding</title>
    <id>http://blog.dbrgn.ch/2009/8/17/show-mysql-database-encoding</id>
    <updated>2009-08-17T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2009/8/17/show-mysql-database-encoding" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;To get the current mysql database encoding, issue the following sql
query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;VARIABLES&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;character_set_database&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Show MySQL Storage Engines</title>
    <id>http://blog.dbrgn.ch/2011/4/9/show-mysql-storage-engines</id>
    <updated>2011-04-09T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2011/4/9/show-mysql-storage-engines" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;If you have ever wanted to know the storage engine type of every table
in one of your MySQL databases, you know how tedious that can be.&lt;/p&gt;
&lt;p&gt;I have written a Python script that will simplify that task. You can get
it on
&lt;a class="reference external" href="https://github.com/dbrgn/MySQL-Show-Storage-Engines"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./show-engines.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python show-engines.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="download"&gt;
&lt;h2&gt;Download:&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/dbrgn/MySQL-Show-Storage-Engines"&gt;https://github.com/dbrgn/MySQL-Show-Storage-Engines&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Storing an IP in MySQL</title>
    <id>http://blog.dbrgn.ch/2009/6/16/storing-an-ip-in-mysql</id>
    <updated>2009-06-16T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2009/6/16/storing-an-ip-in-mysql" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Datatype:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;int(4) unsigned&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Storing IP:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;INET_ATON('192.168.1.39')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Getting IP:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;INET_NTOA(3232235815)&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="practical-example"&gt;
&lt;h2&gt;Practical example&lt;/h2&gt;
&lt;p&gt;Schema&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql&amp;gt; SHOW COLUMNS FROM clickcounter_clicks;
+---------+-----------------+------+-----+---------+----------------+
| Field   | Type            | Null | Key | Default | Extra          |
+---------+-----------------+------+-----+---------+----------------+
| id      | int(11)         | NO   | PRI | NULL    | auto_increment |
| link_id | int(11)         | NO   |     |         |                |
| date    | date            | NO   |     |         |                |
| ip      | int(4) unsigned | NO   |     |         |                |
+---------+-----------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Storing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql&amp;gt; INSERT INTO clickcounter_clicks(`date`, `ip`)
     &amp;gt; VALUES (NOW(), INET_ATON(&amp;#39;192.168.1.39&amp;#39;));
Query OK, 1 row affected, 1 warning (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Retrieving&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql&amp;gt; SELECT date, INET_NTOA(ip) AS ip FROM clickcounter_clicks;
+------------+--------------+
| date       | ip           |
+------------+--------------+
| 2009-06-16 | 192.168.1.39 |
+------------+--------------+
1 row in set (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Using tsql</title>
    <id>http://blog.dbrgn.ch/2012/6/15/freetds-tsql-usage</id>
    <updated>2012-06-15T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2012/6/15/freetds-tsql-usage" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;Today I had to connect to a MSSQL database from a Linux box. A library to do this is &lt;a class="reference external" href="http://www.freetds.org/"&gt;FreeTDS&lt;/a&gt;. It also provides an interactive &lt;tt class="docutils literal"&gt;tsql&lt;/tt&gt; command. Install it from your
distro repositories or compile it by hand.&lt;/p&gt;
&lt;p&gt;Unfortunately the command provides no &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-h&lt;/span&gt;&lt;/tt&gt; option, but there are manpages. Here are
some of the relevant options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-H hostname
      the DNS hostname of the server

-p port
      the port at which SQL Server is listening

-U username
      database login name. If username is not provided, a domain login is attempted for TDS 7+ connections.

-P password
      database password.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After successfully connecting to a database server, there was another issue for me. The SQL queries
were not submitted simply by ending them with a semicolon, unlike the &lt;tt class="docutils literal"&gt;mysql&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;psql&lt;/tt&gt;
tools. It took me a while to figure out that the keyword to submit a query was &lt;tt class="docutils literal"&gt;go&lt;/tt&gt;...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ tsql -H host -p 1433 -U username -P passwd
locale is &amp;quot;en_US.UTF-8&amp;quot;
locale charset is &amp;quot;UTF-8&amp;quot;
using default charset &amp;quot;UTF-8&amp;quot;
1&amp;gt; use MyDatabase
2&amp;gt; go
1&amp;gt; EXEC sp_tables &amp;quot;Security%&amp;quot;
2&amp;gt; go
TABLE_QUALIFIER TABLE_OWNER     TABLE_NAME      TABLE_TYPE      REMARKS
mdPROJECTTIMER  dbo     SecurityLanguages       TABLE   NULL
mdPROJECTTIMER  dbo     SecurityRightGroups     TABLE   NULL
mdPROJECTTIMER  dbo     SecurityRightGroupTranslations  TABLE   NULL
mdPROJECTTIMER  dbo     SecurityRights  TABLE   NULL
mdPROJECTTIMER  dbo     SecurityRights2UserGroups       TABLE   NULL
mdPROJECTTIMER  dbo     SecurityRightTranslations       TABLE   NULL
mdPROJECTTIMER  dbo     SecurityUserGroups      TABLE   NULL
mdPROJECTTIMER  dbo     SecurityUserGroups2Users        TABLE   NULL
mdPROJECTTIMER  dbo     SecurityUsers   TABLE   NULL
mdPROJECTTIMER  dbo     SecurityVersion TABLE   NULL
(10 rows affected)
(return status = 0)
&lt;/pre&gt;&lt;/div&gt;
</content>
  </entry>
</feed>

