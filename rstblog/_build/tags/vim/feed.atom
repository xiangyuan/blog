<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://blog.dbrgn.ch/feed.atom</id>
  <updated>2013-05-27T00:00:00Z</updated>
  <link href="http://blog.dbrgn.ch/" />
  <link href="http://blog.dbrgn.ch/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Einfügen in Vim</title>
    <id>http://blog.dbrgn.ch/2008/7/16/einfugen-in-vim</id>
    <updated>2008-07-16T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2008/7/16/einfugen-in-vim" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;Häufig finde ich auf einer Website Codestücke und will die in &lt;a class="reference external" href="http://vim.org/"&gt;Vim&lt;/a&gt; einfügen.
Jedoch passiert es mir dann immer wieder dass es jede neue Zeile um einen Tab weiter einrückt. Die
erste Zeile ist nicht eingerückt, die zweite Zeile hat ein Tab davor, die Dritte hat zwei, die 20ste
Zeile hat 19 vorangehende Tabs... Das ist sehr nervig. Die Lösung:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;paste&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Und schon kann der Code ganz normal eingefügt werden. Wenn man mit Einfügen fertig ist kann das
normale Verhalten mit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nopaste&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wiederhergestellt werden.&lt;/p&gt;
&lt;p&gt;(Quelle: &lt;a class="reference external" href="http://blog.exeko.com/2007/12/23/debian-vi-disable-autoindent-when-pasting/"&gt;blog.exeko.com&lt;/a&gt;)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">HTML Umbrechen mit VIM</title>
    <id>http://blog.dbrgn.ch/2008/12/10/html-umbrechen-mit-vim</id>
    <updated>2008-12-10T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2008/12/10/html-umbrechen-mit-vim" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;Unser CMS am Arbeitsplatz hat irgend einen Bug, der bewirkt, dass die Codeansicht von Artikeln auf
unserer Webseite so ganz ohne Zeilenumbrüche daherkommt. Eine einzelne Zeile kann man leider nicht
gut bearbeiten, aber zum Glück kann man mit &lt;a class="reference external" href="http://www.vim.org/"&gt;VIM&lt;/a&gt; die Zeile jeweils nach
einem schliessenden HTML-Tag umbrechen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;%&lt;span class="k"&gt;s&lt;/span&gt;&lt;span class="sr"&gt;/\(&amp;lt;\/\a*&amp;gt;\)/&lt;/span&gt;\&lt;span class="m"&gt;1&lt;/span&gt;\&lt;span class="k"&gt;r&lt;/span&gt;/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wiedermal etwas Regex gelernt :)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Recompile Vim with Python/Ruby Support on Arch Linux</title>
    <id>http://blog.dbrgn.ch/2012/10/23/recompile-vim-on-arch-linux</id>
    <updated>2012-10-23T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2012/10/23/recompile-vim-on-arch-linux" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;For my &lt;a class="reference external" href="https://github.com/dbrgn/dotfiles"&gt;vim configuration&lt;/a&gt;, I need a
version of Vim that was built with Python and Ruby support. Unfortunately, the
default version of Vim that is installed with &lt;cite&gt;pacman&lt;/cite&gt; doesn't support
Python/Ruby.&lt;/p&gt;
&lt;p&gt;The easiest way to solve this problem is to install the &lt;cite&gt;gvim&lt;/cite&gt; package instead
of &lt;cite&gt;vim&lt;/cite&gt; (don't worry, the &lt;cite&gt;gvim&lt;/cite&gt; package also includes a &lt;cite&gt;vim&lt;/cite&gt; binary). But
this brings along a huge amount of dependencies that I didn't want on my
system, so there's no way around a package recompilation.&lt;/p&gt;
&lt;p&gt;To ease the reconfiguration-process I found &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Pacbuilder"&gt;pacbuilder&lt;/a&gt;, a script to easily
recompile single packages or even the whole system. Install it using yaourt (or
manually if you prefer):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ yaourt -S pacbuilder-svn
&lt;/pre&gt;
&lt;p&gt;Then rebuild the &lt;cite&gt;vim&lt;/cite&gt; and &lt;cite&gt;vim-runtime&lt;/cite&gt; packages with the &lt;cite&gt;--edit&lt;/cite&gt; option:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pacbuilder --install --edit vim vim-runtime
&lt;/pre&gt;
&lt;p&gt;When the script asks you whether you want to edit the &lt;cite&gt;PKGBUILD&lt;/cite&gt; file, answer
with &lt;cite&gt;y&lt;/cite&gt;. Then find the first line that looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./configure --prefix=/usr --localstatedir=/var/lib/vim \
  --with-features=big --with-compiledby=ArchLinux \
  --enable-gpm --enable-acl --with-x=no \
  --disable-gui --enable-multibyte --enable-cscope \
  --disable-netbeans --enable-perlinterp --disable-pythoninterp \
  --disable-python3interp --disable-rubyinterp --disable-luainterp
&lt;/pre&gt;
&lt;p&gt;Edit the configure options to your likings. In my case, I changed the following
things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;--disable-pythoninterp&lt;/cite&gt; ⇒ &lt;cite&gt;--enable-pythoninterp&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;--disable-python3interp&lt;/cite&gt; ⇒ &lt;cite&gt;--enable-python3interp&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;--disable-rubyinterp&lt;/cite&gt; ⇒ &lt;cite&gt;--enable-rubyinterp&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;--with-compiledby=ArchLinux&lt;/cite&gt; ⇒ &lt;cite&gt;--with-compiledby=&amp;quot;Custom Build (http://s.dbrgn.ch/uqK6)&amp;quot;&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also add &lt;cite&gt;python&lt;/cite&gt;, &lt;cite&gt;python2&lt;/cite&gt; and &lt;cite&gt;ruby&lt;/cite&gt; to the &lt;cite&gt;depends&lt;/cite&gt; list inside the
&lt;cite&gt;package_vim()&lt;/cite&gt; function. Then save and close the &lt;cite&gt;PKGBUILD&lt;/cite&gt; file.&lt;/p&gt;
&lt;p&gt;Pacbuilder will now go on to compile and install your custom build of Vim. You
can verify it with &lt;tt class="docutils literal"&gt;vim &lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/tt&gt; on the commandline.&lt;/p&gt;
&lt;p&gt;Afterwards, if you want to prevent &lt;cite&gt;pacman&lt;/cite&gt; from auto-upgrading your &lt;cite&gt;vim&lt;/cite&gt;
package, you can add &lt;cite&gt;vim&lt;/cite&gt; and &lt;cite&gt;vim-runtime&lt;/cite&gt; to the &lt;cite&gt;IgnorePkg&lt;/cite&gt; variable in
&lt;cite&gt;/etc/pacman.conf&lt;/cite&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Using Jedi with YouCompleteMe</title>
    <id>http://blog.dbrgn.ch/2013/5/27/using-jedi-with-ymc</id>
    <updated>2013-05-27T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/5/27/using-jedi-with-ymc" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;(In case you're not familiar with it yet, &lt;a class="reference external" href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt; is an awesome autocompletion
library for Python that tries to understand your code. There are editor plugins
available for Vim, Emacs and Sublime Text 2.)&lt;/p&gt;
&lt;p&gt;The &amp;quot;official&amp;quot; &lt;a class="reference external" href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt; plugin for vim is &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;jedi-vim&lt;/a&gt;, but there's another vim
autocompletion plugin that supports Jedi: &lt;a class="reference external" href="http://valloric.github.io/YouCompleteMe/"&gt;YouCompleteMe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In contrast to jedi-vim, YCM does not only support Python, it also provides
intelligent &lt;a class="reference external" href="http://clang.llvm.org/"&gt;Clang&lt;/a&gt;-based completion support for C/C++/Objective-C/Objective-C++
as well as omnicomplete based semantic completions for Ruby, PHP and more.&lt;/p&gt;
&lt;p&gt;The way YCM works is by automatically showing completion suggestions while
typing, without the need for a trigger key. Another feature that distinguishes
it from other autocompletion plugins is that the filtering of possible
completions is not based on the prefix, but using subsequence matching instead.
To quote the YCM author, this is a fancy way of saying that any input characters
need to be present in a completion string in the order in which they appear in
the input. So &lt;cite&gt;abc&lt;/cite&gt; is a subsequence of &lt;cite&gt;xaybgc&lt;/cite&gt;, but not of &lt;cite&gt;xbyxaxxc&lt;/cite&gt;. And as
yet another bonus, YCM features integration with &lt;a class="reference external" href="https://github.com/SirVer/ultisnips"&gt;UltiSnips&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More information and docs can be found at
&lt;a class="reference external" href="http://valloric.github.io/YouCompleteMe/"&gt;http://valloric.github.io/YouCompleteMe/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To use YCM with &lt;a class="reference external" href="https://github.com/gmarik/vundle"&gt;vundle&lt;/a&gt;, simply add the following line to your &lt;cite&gt;.vimrc&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Bundle &lt;span class="s1"&gt;&amp;#39;Valloric/YouCompleteMe&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then let vundle install the new bundle:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vim +BundleInstall +qall
&lt;/pre&gt;
&lt;p&gt;In order for YCM to work, you need to compile the core. Use the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--clang-completer&lt;/span&gt;&lt;/tt&gt; argument if you want semantic support for C family
languages.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/.vim/bundle/YouCompleteMe
$ ./install.sh --clang-completer
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;In my &lt;cite&gt;.vimrc&lt;/cite&gt; I currently use only two configuration lines. The first
enables auto closing of the preview window when the user accepts the offered
completion string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_autoclose_preview_window_after_completion&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next line maps Jedi's jump to definition/declaration feature to the
&lt;cite&gt;&amp;lt;leader&amp;gt;g&lt;/cite&gt; shortcut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="further-information"&gt;
&lt;h2&gt;Further Information&lt;/h2&gt;
&lt;p&gt;jedi-vim and YCM are currently not compatible. You have to choose one of them.&lt;/p&gt;
&lt;p&gt;YCM's integration with Jedi is still under development. As soon as all features
are implemented (pydoc is not included yet, for example), it might even replace
jedi-vim as the &amp;quot;officially endorsed&amp;quot; completion plugin. You can find more
information in &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim/issues/119"&gt;jedi-vim issue #119&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information about YCM, refer to its &lt;a class="reference external" href="http://valloric.github.io/YouCompleteMe/"&gt;extensive documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

