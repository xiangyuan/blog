<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://blog.dbrgn.ch/feed.atom</id>
  <updated>2013-06-18T00:00:00Z</updated>
  <link href="http://blog.dbrgn.ch/" />
  <link href="http://blog.dbrgn.ch/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Heroku Buildpack for Numpy, Scipy and Scikit-Learn</title>
    <id>http://blog.dbrgn.ch/2013/6/18/heroku-buildpack-numpy-scipy-scikit-learn</id>
    <updated>2013-06-18T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/6/18/heroku-buildpack-numpy-scipy-scikit-learn" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;(TLDR: &lt;a class="reference external" href="https://github.com/dbrgn/heroku-buildpack-python-sklearn"&gt;https://github.com/dbrgn/heroku-buildpack-python-sklearn&lt;/a&gt;)&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;At &lt;a class="reference external" href="https://www.webrepublic.ch/"&gt;Webrepublic&lt;/a&gt; we just launched a Python based system that among other things
does comparison of large texts using tf-idf vectors in a multi-dimensional
vector space and measuring the cosine similarity between them (see
&lt;a class="reference external" href="http://stackoverflow.com/a/8897648/284318"&gt;http://stackoverflow.com/a/8897648/284318&lt;/a&gt;). For this, we needed &lt;a class="reference external" href="http://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the deployment process, I discovered that &lt;em&gt;one does not simply deploy
scikit-learn on Heroku&lt;/em&gt;. There were different issues with it. First of all,
Scipy needs Numpy to be available at &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; parse time. If you just
install Numpy and Scipy using requirements.txt, Numpy won't yet be installed at
the time the Scipy &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; is processed. (Note that this has been fixed in
&lt;a class="reference external" href="https://github.com/scipy/scipy/pull/453"&gt;current versions of Scipy&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Another issue was that a Fortran compiler and different libraries are needed to
build Scipy, all of which are not available on Heroku.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-solving-attempts"&gt;
&lt;h2&gt;Problem Solving Attempts&lt;/h2&gt;
&lt;p&gt;The first thing I found while looking for a solution was
&lt;a class="reference external" href="https://github.com/wyn/heroku-buildpack-python"&gt;wyn/heroku-buildpack-python&lt;/a&gt;, but I couldn't quite get it to work. The second
thing I found was &lt;a class="reference external" href="https://github.com/ToonTimbermont/heroku-buildpack-python"&gt;ToonTimbermont/heroku-buildpack-python&lt;/a&gt;, a fork of wyn's
fork that solves some of the issues.&lt;/p&gt;
&lt;p&gt;(I also played around with Kenneth Reitz's &lt;a class="reference external" href="https://github.com/kennethreitz/anaconda-buildpack"&gt;anaconda buildpack&lt;/a&gt;, but didn't
really get it to work the way I wanted it.)&lt;/p&gt;
&lt;p&gt;By combining the work of both developers, using the &lt;a class="reference external" href="https://github.com/wyn/npscipy-binaries"&gt;precompiled binaries by
wyn&lt;/a&gt; and adding some code I managed to rebase all the changes on top of
Heroku's current buildpack. This solves some issues/bugs with older versions of
Pip.&lt;/p&gt;
&lt;p&gt;Another change I made was that the dependencies can be stated in
&lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; as usual, instead of requiring a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;You can find the buildpack at
&lt;a class="reference external" href="https://github.com/dbrgn/heroku-buildpack-python-sklearn"&gt;https://github.com/dbrgn/heroku-buildpack-python-sklearn&lt;/a&gt;. All the changes
against the official Heroku buildpack have been condensed in a &lt;a class="reference external" href="https://github.com/dbrgn/heroku-buildpack-python-sklearn/commit/87cf7b24a358b916deaf26b784ea95be42590efe"&gt;single commit&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;The process to use the buildpack is as straightforward as with any other
buildpack. For a new app:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
heroku create --buildpack https://github.com/dbrgn/heroku-buildpack-python-sklearn/
&lt;/pre&gt;
&lt;p&gt;For an existing app:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
heroku config:set BUILDPACK_URL=https://github.com/dbrgn/heroku-buildpack-python-sklearn/
&lt;/pre&gt;
&lt;p&gt;If you have any questions or problems, feel free to leave a comment or &lt;a class="reference external" href="https://github.com/dbrgn/heroku-buildpack-python-sklearn/issues"&gt;open an
issue on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Using Jedi with YouCompleteMe</title>
    <id>http://blog.dbrgn.ch/2013/5/27/using-jedi-with-ymc</id>
    <updated>2013-05-27T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/5/27/using-jedi-with-ymc" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;(In case you're not familiar with it yet, &lt;a class="reference external" href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt; is an awesome autocompletion
library for Python that tries to understand your code. There are editor plugins
available for Vim, Emacs and Sublime Text 2.)&lt;/p&gt;
&lt;p&gt;The &amp;quot;official&amp;quot; &lt;a class="reference external" href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt; plugin for vim is &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;jedi-vim&lt;/a&gt;, but there's another vim
autocompletion plugin that supports Jedi: &lt;a class="reference external" href="http://valloric.github.io/YouCompleteMe/"&gt;YouCompleteMe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In contrast to jedi-vim, YCM does not only support Python, it also provides
intelligent &lt;a class="reference external" href="http://clang.llvm.org/"&gt;Clang&lt;/a&gt;-based completion support for C/C++/Objective-C/Objective-C++
as well as omnicomplete based semantic completions for Ruby, PHP and more.&lt;/p&gt;
&lt;p&gt;The way YCM works is by automatically showing completion suggestions while
typing, without the need for a trigger key. Another feature that distinguishes
it from other autocompletion plugins is that the filtering of possible
completions is not based on the prefix, but using subsequence matching instead.
To quote the YCM author, this is a fancy way of saying that any input characters
need to be present in a completion string in the order in which they appear in
the input. So &lt;cite&gt;abc&lt;/cite&gt; is a subsequence of &lt;cite&gt;xaybgc&lt;/cite&gt;, but not of &lt;cite&gt;xbyxaxxc&lt;/cite&gt;. And as
yet another bonus, YCM features integration with &lt;a class="reference external" href="https://github.com/SirVer/ultisnips"&gt;UltiSnips&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More information and docs can be found at
&lt;a class="reference external" href="http://valloric.github.io/YouCompleteMe/"&gt;http://valloric.github.io/YouCompleteMe/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To use YCM with &lt;a class="reference external" href="https://github.com/gmarik/vundle"&gt;vundle&lt;/a&gt;, simply add the following line to your &lt;cite&gt;.vimrc&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Bundle &lt;span class="s1"&gt;&amp;#39;Valloric/YouCompleteMe&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then let vundle install the new bundle:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vim +BundleInstall +qall
&lt;/pre&gt;
&lt;p&gt;In order for YCM to work, you need to compile the core. Use the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--clang-completer&lt;/span&gt;&lt;/tt&gt; argument if you want semantic support for C family
languages.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd ~/.vim/bundle/YouCompleteMe
$ ./install.sh --clang-completer
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;In my &lt;cite&gt;.vimrc&lt;/cite&gt; I currently use only two configuration lines. The first
enables auto closing of the preview window when the user accepts the offered
completion string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_autoclose_preview_window_after_completion&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next line maps Jedi's jump to definition/declaration feature to the
&lt;cite&gt;&amp;lt;leader&amp;gt;g&lt;/cite&gt; shortcut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="further-information"&gt;
&lt;h2&gt;Further Information&lt;/h2&gt;
&lt;p&gt;jedi-vim and YCM are currently not compatible. You have to choose one of them.&lt;/p&gt;
&lt;p&gt;YCM's integration with Jedi is still under development. As soon as all features
are implemented (pydoc is not included yet, for example), it might even replace
jedi-vim as the &amp;quot;officially endorsed&amp;quot; completion plugin. You can find more
information in &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim/issues/119"&gt;jedi-vim issue #119&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information about YCM, refer to its &lt;a class="reference external" href="http://valloric.github.io/YouCompleteMe/"&gt;extensive documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">PHP-FPM and Nginx Upstream Configuration</title>
    <id>http://blog.dbrgn.ch/2013/5/25/php-fpm-connection-refused</id>
    <updated>2013-05-25T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/5/25/php-fpm-connection-refused" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;Most &lt;a class="reference external" href="http://nginx.org/"&gt;nginx&lt;/a&gt; / &lt;a class="reference external" href="http://php-fpm.org/"&gt;php-fpm&lt;/a&gt; tutorials you'll find nowadays recommend to create an
nginx upstream configuration that listens on localhost port 9000.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
upstream php {
    server 127.0.0.1:9000;
}
&lt;/pre&gt;
&lt;p&gt;If you're using a current version of Debian and php5-fpm from &lt;a class="reference external" href="http://www.dotdeb.org/"&gt;dotdeb&lt;/a&gt;, this
won't work though and you'll see the following error message in your nginx log:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2013/05/25 00:12:04 [error] 17672#0: *76 connect() failed (111: Connection refused) while connecting to
upstream, client: 2a02:1205:5050:8530:c5f6:250c:ffa0:4d49, server: example.com, request: &amp;quot;GET /index.php
HTTP/1.1&amp;quot;, upstream: &amp;quot;fastcgi://127.0.0.1:9000&amp;quot;, host: &amp;quot;example.com&amp;quot;
&lt;/pre&gt;
&lt;p&gt;This is because the dotdeb version seems to have changed the default
configuration from the IP based version to a unix domain socket. You can grep
for the important line in your configuration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
danilo&amp;#64;server:~$ grep -ri &amp;quot;listen = &amp;quot; /etc/php5/fpm/
/etc/php5/fpm/pool.d/www.conf:listen = /var/run/php5-fpm.sock
&lt;/pre&gt;
&lt;p&gt;To be on the safe side, you can also test whether any process is listening on
port 9000:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
danilo&amp;#64;server:~$ sudo lsof -i tcp:9000
danilo&amp;#64;server:~$
&lt;/pre&gt;
&lt;p&gt;It's trivial to adjust the nginx configuration accordingly:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
upstream php {
    server unix:/var/run/php5-fpm.sock;
}
&lt;/pre&gt;
&lt;p&gt;Simply restart nginx and everything should be working.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">ufw – A Simple iptables Frontend</title>
    <id>http://blog.dbrgn.ch/2013/5/16/ufw-firewall</id>
    <updated>2013-05-16T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/5/16/ufw-firewall" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;If you're looking for a simple frontend to iptables, you might want to take a
look at &lt;a class="reference external" href="https://wiki.ubuntu.com/UncomplicatedFirewall"&gt;ufw&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ufw stands for &lt;em&gt;Uncomplicated Firewall&lt;/em&gt; and has been developed for Ubuntu
Server, to simplify the firewall management process. It provides a fairly
simple but very powerful commandline interface to show, add and edit firewall
rules.&lt;/p&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;On Debian Squeeze or Wheezy, you can install UFW directly from the main
repository:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#&amp;gt; aptitude install ufw
&lt;/pre&gt;
&lt;p&gt;Default behavior is to deny all incoming traffic and to allow all outgoing
traffic. First, if you're connected to the server via SSH, allow incoming SSH
traffic to avoid locking yourself out:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#&amp;gt; ufw allow SSH
Rules updated
Rules updated (v6)
&lt;/pre&gt;
&lt;p&gt;Then enable the firewall:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#&amp;gt; ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? y
Firewall is active and enabled on system startup
&lt;/pre&gt;
&lt;p&gt;Now ufw is enabled and will be started automatically at boot time. You can list
the enabled rules with the &lt;tt class="docutils literal"&gt;status&lt;/tt&gt; command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#&amp;gt; ufw status verbose
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing)
New profiles: skip

To                         Action      From
--                         ------      ----
22/tcp (SSH)               ALLOW IN    Anywhere
22/tcp (SSH (v6))          ALLOW IN    Anywhere (v6)
&lt;/pre&gt;
&lt;p&gt;You can add further services with the &lt;tt class="docutils literal"&gt;allow&lt;/tt&gt; command. ufw comes with some
preconfigured application profiles, you can list them using &lt;tt class="docutils literal"&gt;ufw app
list&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#&amp;gt; ufw app list
Available applications:
  AIM
  Bind9
  Bonjour
  CIFS
  DNS
  ...
&lt;/pre&gt;
&lt;p&gt;You can also use the aliases in &lt;cite&gt;/etc/services&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#&amp;gt; cat /etc/services | grep -i amqp
amqp            5672/tcp
amqp            5672/udp
amqp            5672/sctp
&lt;/pre&gt;
&lt;p&gt;For example, allow all incoming DNS traffic:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#&amp;gt; ufw allow DNS
Rule added
Rule added (v6)
&lt;/pre&gt;
&lt;p&gt;To deny outgoing IRC traffic:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#&amp;gt; ufw deny out ircd
Rule added
Rule added (v6)
&lt;/pre&gt;
&lt;p&gt;The full syntax for the allow/deny function is as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ufw [--dry-run] [delete] [insert NUM] allow|deny|reject|limit [in|out]
[log|log-all] PORT[/protocol]

ufw [--dry-run] [delete] [insert NUM]  allow|deny|reject|limit  [in|out  on
INTERFACE]  [log|log-all] [proto protocol] [from ADDRESS [port PORT]] [to
ADDRESS [port PORT]]
&lt;/pre&gt;
&lt;p&gt;The status output should now look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# ufw status
Status: active

To                         Action      From
--                         ------      ----
SSH                        ALLOW       Anywhere
DNS                        ALLOW       Anywhere
SSH (v6)                   ALLOW       Anywhere (v6)
DNS (v6)                   ALLOW       Anywhere (v6)

6667/tcp                   DENY OUT    Anywhere
6667/tcp                   DENY OUT    Anywhere (v6)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;For a more in-depth introduction, including the removal of rules and the
configuration of rules with specific IPs or IP subnets, refer to the &lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;Ubuntu
help pages&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Enums in Python</title>
    <id>http://blog.dbrgn.ch/2013/5/10/python-enum-type</id>
    <updated>2013-05-10T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/5/10/python-enum-type" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;Until now, if you wanted to use enumeration types in Python you had to fall back
to a class-attribute approach:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="n"&gt;RED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="n"&gt;GREEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="n"&gt;BLUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This has different downsides, for example with representation (&lt;tt class="docutils literal"&gt;Color.RED&lt;/tt&gt; is
represented as an integer, not as a color type) and comparability (&lt;tt class="docutils literal"&gt;Color.RED&lt;/tt&gt;
will be equal to &lt;tt class="docutils literal"&gt;HttpResponses.INTERNAL_SERVER_ERROR&lt;/tt&gt; if both have the value
1).&lt;/p&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0435/"&gt;PEP 435&lt;/a&gt;, which was accepted by &lt;a class="reference external" href="http://www.python.org/~guido/"&gt;Guido&lt;/a&gt; today. It specifies a new base
class which can be subclassed to create a custom enumeration.&lt;/p&gt;
&lt;div class="section" id="quickstart"&gt;
&lt;h2&gt;Quickstart&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Declaration:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Representation:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Iteration:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Programmatic access:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's even more awesome stuff you can do with those enums. For more
information, refer to &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0435/"&gt;the proposal&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-already-use-this"&gt;
&lt;h2&gt;Can I already use this?&lt;/h2&gt;
&lt;p&gt;Yes and no. The PEP will be included in Python 3.4. But if you want to start
using it right now, you can use the &lt;a class="reference external" href="http://pythonhosted.org/flufl.enum/"&gt;flufl.enum&lt;/a&gt; library which is the base
implementation for PEP 435 and works for Python ≥2.7 and ≥3.2.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">List Outdated Dependencies with Pip</title>
    <id>http://blog.dbrgn.ch/2013/4/26/pip-list-outdated</id>
    <updated>2013-04-26T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/4/26/pip-list-outdated" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;In the past, if you wanted to review your installed pip packages to see if there
are updates available, you either had to use tools like &lt;a class="reference external" href="https://github.com/nvie/pip-tools"&gt;pip-tools&lt;/a&gt; or check
all of them manually.&lt;/p&gt;
&lt;p&gt;But since version 1.3 (released on 2013-03-07), pip supports the checking of
dependencies with the new &lt;tt class="docutils literal"&gt;list&lt;/tt&gt; command. In contrast to &lt;tt class="docutils literal"&gt;pip freeze&lt;/tt&gt;, the
primary idea of the &lt;tt class="docutils literal"&gt;list&lt;/tt&gt; command is to list and analyze installed packages
in a human readable (instead of machine parseable) format.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip freeze
django-unchained==1.0.1
requests==1.1.0
wsgiref==0.1.2
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ pip list
django-unchained (1.0.1)
requests (1.1.0)
wsgiref (0.1.2)
&lt;/pre&gt;
&lt;p&gt;The best thing about the new command is that you can check packages for updates
and list only specific packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
List Options:
  -o, --outdated     List outdated packages (excluding editables)
  -u, --uptodate     List uptodate packages (excluding editables)
  -e, --editable     List editable projects.
  -l, --local        If in a virtualenv that has global access, do not list globally-installed packages.
&lt;/pre&gt;
&lt;p&gt;In summary, you can now show outdated dependencies with a single pip command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip list --outdated
requests (Current: 1.1.0 Latest: 1.2.0)
&lt;/pre&gt;
&lt;p&gt;Awesome!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Testing Dajaxice Views in Django</title>
    <id>http://blog.dbrgn.ch/2013/3/27/testing-dajaxice-views</id>
    <updated>2013-03-27T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/3/27/testing-dajaxice-views" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;If you want to test &lt;a class="reference external" href="http://www.dajaxproject.com/"&gt;Dajaxice&lt;/a&gt; views from the
Django test client, this might be your first approach:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/dajaxice/apps.front.add_vote/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;primary_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This doesn't work for several reasons.&lt;/p&gt;
&lt;p&gt;First of all, we need to simulate an AJAX request. Therefore the
&lt;tt class="docutils literal"&gt;HTTP_X_REQUESTED_WITH&lt;/tt&gt; header needs to be set. We can do this by simply
passing it as a kwarg to the &lt;tt class="docutils literal"&gt;client.post&lt;/tt&gt; method.&lt;/p&gt;
&lt;p&gt;Furthermore, the default data encoding is &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;multipart/form-data&lt;/span&gt;&lt;/tt&gt;, which is not
what we want. Dajax uses &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;/tt&gt; encoding. We can
solve this by setting the &lt;tt class="docutils literal"&gt;content_type&lt;/tt&gt; kwarg.&lt;/p&gt;
&lt;p&gt;The third problem is that we can't simply urlencode the data dictionary
directly. The JSON formatted payload should be the value of a key called
&lt;tt class="docutils literal"&gt;argv&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Here's a solution that works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/dajaxice/apps.front.add_vote/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;primary_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;argv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;HTTP_X_REQUESTED_WITH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;XMLHttpRequest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Programming a Perceptron in Python</title>
    <id>http://blog.dbrgn.ch/2013/3/26/perceptrons-in-python</id>
    <updated>2013-03-26T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/3/26/perceptrons-in-python" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;At &lt;a class="reference external" href="http://www.hsr.ch/"&gt;HSR&lt;/a&gt;, I'm currently enrolled in a course about neural networks and machine
learning. One of the simplest forms of a neural network model is the
&lt;a class="reference external" href="http://reference.wolfram.com/applications/neuralnetworks/NeuralNetworkTheory/2.4.0.html"&gt;perceptron&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="background-information"&gt;
&lt;h2&gt;Background Information&lt;/h2&gt;
&lt;p&gt;A perceptron classifier is a simple model of a neuron. It has different inputs
(&lt;em&gt;x1&lt;/em&gt; ... &lt;em&gt;xn&lt;/em&gt;) with different weights (&lt;em&gt;w1&lt;/em&gt; ... &lt;em&gt;wn&lt;/em&gt;).&lt;/p&gt;
&lt;blockquote class="math"&gt;&lt;img src="/static/_math/168ec599f225dd3b64c2c93ef790e347e54e1a1e.png" alt="s = \sum_{i=0}^n w_i \cdot x_i"&gt;&lt;/blockquote&gt;&lt;p&gt;The weighted sum &lt;em&gt;s&lt;/em&gt; of these inputs is then passed through a step function &lt;em&gt;f&lt;/em&gt;
(usually a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Heaviside_step_function"&gt;Heaviside step function&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote class="math"&gt;&lt;img src="/static/_math/8272944ab004edd596966eb30f058e8efc3f39aa.png" alt="f(s) = \begin{cases} 1 &amp;amp; \textrm{if } s \ge 0 \\ 0 &amp;amp; \textrm{otherwise} \end{cases}"&gt;&lt;/blockquote&gt;&lt;p&gt;To make things cleaner, here's a little diagram:&lt;/p&gt;
&lt;img alt="The mathematical model of a perceptron." src="/static/img/2013/3/26/perceptron.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python!&lt;/h2&gt;
&lt;p&gt;Here's a simple version of such a perceptron using Python and &lt;a class="reference external" href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt;. It will
take two inputs and learn to act like the logical OR function. First, let's
import some libraries we need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then let's create the step function. &lt;a class="reference external" href="http://reference.wolfram.com/mathematica/ref/UnitStep.html"&gt;In reference to Mathematica&lt;/a&gt;, I'll call
this function &lt;tt class="docutils literal"&gt;unit_step&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;unit_step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to map the possible input to the expected output. The first two
entries of the NumPy array in each tuple are the two input values. The second
element of the tuple is the expected result. And the third entry of the array is
a &amp;quot;dummy&amp;quot; input which – if I understood it correctly, please correct me if this
is wrong – is needed to make a nonzero threshold possible. Its value is always
1. More about this can be found in
&lt;a class="reference external" href="http://www.cs.cmu.edu/~avrim/ML09/lect0126.pdf"&gt;this paper&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;training_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, this training sequence maps exactly to the definition of the OR
function:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="21%" /&gt;
&lt;col width="21%" /&gt;
&lt;col width="57%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;A&lt;/th&gt;
&lt;th class="head"&gt;B&lt;/th&gt;
&lt;th class="head"&gt;A OR B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Next we'll choose three random numbers between 0 and 1 as the initial weights:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now on to some variable initializations. The &lt;tt class="docutils literal"&gt;errors&lt;/tt&gt; list is only used to
store the error values so that they can be plotted later on. If you don't want
to do any plotting, you can just leave it away. The &lt;tt class="docutils literal"&gt;eta&lt;/tt&gt; variable controls
the learning rate. And &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; specifies the number of learning iterations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;eta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to find the ideal values for the weights &lt;tt class="docutils literal"&gt;w&lt;/tt&gt;, we try to reduce the
error magnitude to zero. In this simple case &lt;tt class="docutils literal"&gt;n = 100&lt;/tt&gt; iterations are enough;
for a bigger and possibly &amp;quot;noisier&amp;quot; set of input data much larger numbers should
be used.&lt;/p&gt;
&lt;p&gt;First we get a random input set from the training data. Then we calculate the
dot product (sometimes also called scalar product or inner product) of the input
and weight vectors. This is our (scalar) result, which we can compare to the
expected value. If the expected value is bigger, we need to increase the
weights, if it's smaller, we need to decrease them. This correction factor is
calculated in the last line, where the error is multiplied with the learning
rate (&lt;tt class="docutils literal"&gt;eta&lt;/tt&gt;) and the input vector (&lt;tt class="docutils literal"&gt;x&lt;/tt&gt;). It is then added to the weights
vector, in order to improve the results in the next iteration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;training_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;unit_step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;eta&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that's already everything we need in order to train the perceptron! It has
now &amp;quot;learned&amp;quot; to act like a logical OR function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;training_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: {} -&amp;gt; {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unit_step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.0714566687173&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mf"&gt;0.829739696273&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mf"&gt;0.345454042997&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mf"&gt;1.24665040799&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you're interested, you can also plot the errors, which is a great way to
visualize the learning process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pylab&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;
&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="/static/img/2013/3/26/error_plot.png" src="/static/img/2013/3/26/error_plot.png" /&gt;
&lt;p&gt;It's easy to see that the errors stabilize around the 60th iteration. If you
doubt that the errors are definitely eliminated, you can re-run the training
with an iteration count of 500 or more and plot the errors:&lt;/p&gt;
&lt;img alt="/static/img/2013/3/26/error_plot2.png" src="/static/img/2013/3/26/error_plot2.png" /&gt;
&lt;p&gt;You could also try to change the training sequence in order to model an AND, NOR
or NOT function. Note that it's not possible to model an XOR function using a
single-layer perceptron like this, because the two classes (0 and 1) of an XOR
function are not linearly separable. In that case you would have to use multiple
layers of perceptrons (which is basically a small neural network).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wrap-up"&gt;
&lt;h2&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;Here's the entire code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;unit_step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;training_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;eta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;training_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;unit_step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;eta&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;training_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: {} -&amp;gt; {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unit_step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have any questions, or if you've discovered an error (which is easily
possible as I've just learned about this stuff), feel free to leave a comment
below.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">d3.js and X-Requested-With</title>
    <id>http://blog.dbrgn.ch/2013/3/8/d3js-xhr-x-requested-with-header</id>
    <updated>2013-03-08T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/3/8/d3js-xhr-x-requested-with-header" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;Most JavaScript frameworks set the &lt;cite&gt;X-Requested-With&lt;/cite&gt; HTTP Header to
&lt;cite&gt;XMLHttpRequest&lt;/cite&gt; when sending non-cross-domain XHR requests. Many web
frameworks like &lt;a class="reference external" href="http://djangoproject.com/"&gt;Django&lt;/a&gt; or &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; use this to detect AJAX requests.&lt;/p&gt;
&lt;p&gt;Because of issues with &lt;cite&gt;X-Requested-With&lt;/cite&gt; and cross-domain XHR requests, d3.js
&lt;a class="reference external" href="https://github.com/mbostock/d3/pull/592"&gt;does not set that header by default&lt;/a&gt;.
Therefore Django's &lt;cite&gt;request.is_ajax()&lt;/cite&gt; and Flask's &lt;cite&gt;request.is_xhr()&lt;/cite&gt; break.&lt;/p&gt;
&lt;p&gt;In order to make d3 work with those AJAX detection functions, you need to
manually add the header to the request. Instead of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Process data&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you would write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-Requested-With&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;XMLHttpRequest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Process data&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Never use the &lt;cite&gt;X-Requested-With&lt;/cite&gt; header as a security feature. It
provides no security whatsoever and can always be faked.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://blog.dbrgn.ch/feed.atom">
    <title type="text">Git Introduction Presentation Slides</title>
    <id>http://blog.dbrgn.ch/2013/2/7/git-introduction-presentation-slides</id>
    <updated>2013-02-07T00:00:00Z</updated>
    <link href="http://blog.dbrgn.ch/2013/2/7/git-introduction-presentation-slides" />
    <author>
      <name>Danilo Bargen</name>
    </author>
    <content type="html">&lt;p&gt;This week, I held a short introductory presentation about &lt;a class="reference external" href="http://git-scm.com/"&gt;git&lt;/a&gt; at
&lt;a class="reference external" href="http://www.webrepublic.ch/"&gt;Webrepublic&lt;/a&gt;. I used the opportunity to play around with &lt;a class="reference external" href="http://rvl.io/"&gt;rvl.io&lt;/a&gt;, the free
online-editor to create &lt;a class="reference external" href="http://lab.hakim.se/reveal-js/"&gt;reveal.js&lt;/a&gt; based presentations. Here it is:&lt;/p&gt;
&lt;iframe src="http://dbrgn.ch/slides/20130207_getting_git/" id="slides" name="" width="100%" height="720px" class="" sandbox="allow-scripts" seamless &gt;&lt;/iframe&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Direct URL: &lt;a class="reference external" href="http://dbrgn.ch/slides/20130207_getting_git/"&gt;http://dbrgn.ch/slides/20130207_getting_git/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;License: CC-BY-SA 3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thing I like most about reveal.js is that it looks really great in an iframe
:) To include the iframe in this blog, I also created a new ReStructuredText
directive, available &lt;a class="reference external" href="https://github.com/dbrgn/rstblog/blob/iframe_module/rstblog/modules/iframe.py"&gt;on github&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>

